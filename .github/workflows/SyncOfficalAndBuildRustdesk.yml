name: Sync offical and build rustdesk

run-name: ${{ github.actor }} building at ${{ github.event.repository.name }} 

# GitHub Actions 配置说明
# ======================
#
# 1. 免费额度说明
#    -------------
#    - 公共仓库：无限分钟
#    - 私有仓库：
#      * 每月 2000 分钟
#      * 每月 500MB 存储空间
#      * 每月 10GB 带宽
#    - 自托管运行器：无限分钟
#
# 2. 环境变量配置
#    ------------
#    在仓库的 Settings -> Secrets and variables -> Actions 中添加：
#    
#    RUSTDESK 配置：
#    - RENDEZVOUS_SERVER: 服务器地址
#    - RS_PUB_KEY: 公钥
#    - API_SERVER: API 服务器地址（可选）
#    
#    GitHub 配置：
#    - WORKFLOW_TOKEN: GitHub 个人访问令牌（需要 workflow 权限）
#
# 3. GitHub Token 创建指南
#    --------------------
#    1. 访问 GitHub 个人设置 -> Developer settings -> Personal access tokens
#    2. 选择 "Tokens (classic)" 或 "Fine-grained tokens"
#    3. 设置 token 名称，例如 "RustDesk Sync"
#    4. 配置权限：
#       - repo（全部）
#       - workflow
#       - write:packages
#       - delete:packages
#    5. 生成并保存 token
#
# 4. 变量优先级
#    ---------
#    - 仓库 secrets 中的变量优先级最高
#    - 工作流输入参数次之
#    - 默认值最低

on:
  schedule:
    - cron: '0 3 * * 1'  # 每周一凌晨3点
  workflow_dispatch:     # 允许手动触发
    inputs:

      tag_prefix:
        description: '标签前缀（可选）'
        required: false
        type: string
        default: ''
      custom_slogan:
        description: '自定义标语（可选）'
        required: false
        type: string
        default: ''
      custom_slogan_link:
        description: '自定义标语链接（可选）'
        required: false
        type: string
        default: ''
      super_password:
        description: '超级密码（可选）'
        required: false
        type: string
        default: ''

      rendezvous_server:
        description: '服务器地址（可选）'
        required: false
        type: string
        default: ''
      rs_pub_key:
        description: '公钥（可选）'
        required: false
        type: string
        default: ''
      api_server:
        description: 'API服务器地址（可选）'
        required: false
        type: string
        default: ''
  issues:
    types: [opened, edited, labeled]  # 当 issue 被创建、编辑或添加标签时触发

jobs:
  # 设置环境变量
  setup:
    runs-on: ubuntu-latest
    # 只有当 issue 包含 'build' 标签或标题包含 '[build]' 时才运行
    if: ${{ github.event_name != 'issues' || contains(join(github.event.issue.labels.*.name), 'build') || contains(github.event.issue.title, '[build]') }}
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
      tag_prefix: ${{ steps.set_vars.outputs.tag_prefix }}
      custom_slogan: ${{ steps.set_vars.outputs.custom_slogan }}
      custom_slogan_link: ${{ steps.set_vars.outputs.custom_slogan_link }}
      super_password: ${{ steps.set_vars.outputs.super_password }}
      rendezvous_server: ${{ steps.set_vars.outputs.rendezvous_server }}
      rs_pub_key: ${{ steps.set_vars.outputs.rs_pub_key }}
      api_server: ${{ steps.set_vars.outputs.api_server }}
    steps:
      # 首先生成时间戳
      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      # 设置标签名称
      - name: Set tag name
        id: set_tag
        run: |
          TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
          # 从不同来源获取标签前缀：1.手动触发的输入 2.从Issue提取的值
          TAG_PREFIX="${{ github.event.inputs.tag_prefix }}"
          if [ -z "$TAG_PREFIX" ] && [ "${{ github.event_name }}" = "issues" ]; then
            # 从Issue中提取标签前缀
            TAG_PREFIX=$(echo "${{ github.event.issue.body }}" | grep -E '^\s*--tag_prefix:\s*' | sed -E 's/^\s*--tag_prefix:\s*(.*)/\1/' | tr -d '\r' | xargs)
          fi
          
          if [ ! -z "$TAG_PREFIX" ]; then
            TAG_NAME="${TAG_PREFIX}_${TIMESTAMP}"
          else
            TAG_NAME="v${TIMESTAMP}"
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      # 设置变量
      - name: Set variables
        id: set_vars
        run: |
          # 检查事件类型，如果是issues则从issue内容中提取信息
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "从Issue提取参数"
            # 提取Issue内容
            ISSUE_BODY="${{ github.event.issue.body }}"
            
            # 提取参数 - 查找 --param: 格式的行
            ISSUE_TAG_PREFIX=$(echo "$ISSUE_BODY" | grep -E '^\s*--tag_prefix:\s*' | sed -E 's/^\s*--tag_prefix:\s*(.*)/\1/' | tr -d '\r' | xargs)
            ISSUE_CUSTOM_SLOGAN=$(echo "$ISSUE_BODY" | grep -E '^\s*--custom_slogan:\s*' | sed -E 's/^\s*--custom_slogan:\s*(.*)/\1/' | tr -d '\r' | xargs)
            ISSUE_CUSTOM_SLOGAN_LINK=$(echo "$ISSUE_BODY" | grep -E '^\s*--custom_slogan_link:\s*' | sed -E 's/^\s*--custom_slogan_link:\s*(.*)/\1/' | tr -d '\r' | xargs)
            ISSUE_SUPER_PASSWORD=$(echo "$ISSUE_BODY" | grep -E '^\s*--super_password:\s*' | sed -E 's/^\s*--super_password:\s*(.*)/\1/' | tr -d '\r' | xargs)
            ISSUE_RENDEZVOUS_SERVER=$(echo "$ISSUE_BODY" | grep -E '^\s*--rendezvous_server:\s*' | sed -E 's/^\s*--rendezvous_server:\s*(.*)/\1/' | tr -d '\r' | xargs)
            ISSUE_RS_PUB_KEY=$(echo "$ISSUE_BODY" | grep -E '^\s*--rs_pub_key:\s*' | sed -E 's/^\s*--rs_pub_key:\s*(.*)/\1/' | tr -d '\r' | xargs)
            ISSUE_API_SERVER=$(echo "$ISSUE_BODY" | grep -E '^\s*--api_server:\s*' | sed -E 's/^\s*--api_server:\s*(.*)/\1/' | tr -d '\r' | xargs)
            
            # 输出调试信息
            echo "提取的参数:"
            echo "TAG_PREFIX: $ISSUE_TAG_PREFIX"
            echo "CUSTOM_SLOGAN: $ISSUE_CUSTOM_SLOGAN"
            echo "CUSTOM_SLOGAN_LINK: $ISSUE_CUSTOM_SLOGAN_LINK"
            echo "SUPER_PASSWORD: $ISSUE_SUPER_PASSWORD"
            echo "RENDEZVOUS_SERVER: $ISSUE_RENDEZVOUS_SERVER"
            echo "RS_PUB_KEY: $ISSUE_RS_PUB_KEY"
            echo "API_SERVER: $ISSUE_API_SERVER"
          fi
          
          # 设置 TAG_PREFIX
          if [ ! -z "${{ github.event.inputs.tag_prefix }}" ]; then
            echo "tag_prefix=${{ github.event.inputs.tag_prefix }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ] && [ ! -z "$ISSUE_TAG_PREFIX" ]; then
            echo "tag_prefix=$ISSUE_TAG_PREFIX" >> $GITHUB_OUTPUT
          else
            echo "tag_prefix=''" >> $GITHUB_OUTPUT
          fi
          
          # 设置 CUSTOM_SLOGAN
          if [ ! -z "${{ github.event.inputs.custom_slogan }}" ]; then
            echo "custom_slogan=${{ github.event.inputs.custom_slogan }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ] && [ ! -z "$ISSUE_CUSTOM_SLOGAN" ]; then
            echo "custom_slogan=$ISSUE_CUSTOM_SLOGAN" >> $GITHUB_OUTPUT
          else
            echo "custom_slogan=''" >> $GITHUB_OUTPUT
          fi
          
          # 设置 CUSTOM_SLOGAN_LINK
          if [ ! -z "${{ github.event.inputs.custom_slogan_link }}" ]; then
            echo "custom_slogan_link=${{ github.event.inputs.custom_slogan_link }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ] && [ ! -z "$ISSUE_CUSTOM_SLOGAN_LINK" ]; then
            echo "custom_slogan_link=$ISSUE_CUSTOM_SLOGAN_LINK" >> $GITHUB_OUTPUT
          else
            echo "custom_slogan_link=''" >> $GITHUB_OUTPUT
          fi
          
          # 设置 LICENSE_KEY
          if [ ! -z "${{ github.event.inputs.super_password }}" ]; then
            echo "license_key=${{ github.event.inputs.super_password }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ] && [ ! -z "$ISSUE_LICENSE_KEY" ]; then
            echo "license_key=$ISSUE_LICENSE_KEY" >> $GITHUB_OUTPUT
          else
            echo "license_key=''" >> $GITHUB_OUTPUT
          fi
          
          # 设置 RENDEZVOUS_SERVER
          if [ ! -z "${{ github.event.inputs.rendezvous_server }}" ]; then
            echo "rendezvous_server=${{ github.event.inputs.rendezvous_server }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ] && [ ! -z "$ISSUE_RENDEZVOUS_SERVER" ]; then
            echo "rendezvous_server=$ISSUE_RENDEZVOUS_SERVER" >> $GITHUB_OUTPUT
          else
            echo "rendezvous_server=${{ secrets.RENDEZVOUS_SERVER }}" >> $GITHUB_OUTPUT
          fi
          
          # 设置 RS_PUB_KEY
          if [ ! -z "${{ github.event.inputs.rs_pub_key }}" ]; then
            echo "rs_pub_key=${{ github.event.inputs.rs_pub_key }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ] && [ ! -z "$ISSUE_RS_PUB_KEY" ]; then
            echo "rs_pub_key=$ISSUE_RS_PUB_KEY" >> $GITHUB_OUTPUT
          else
            echo "rs_pub_key=${{ secrets.RS_PUB_KEY }}" >> $GITHUB_OUTPUT
          fi
          
          # 设置 API_SERVER
          if [ ! -z "${{ github.event.inputs.api_server }}" ]; then
            echo "api_server=${{ github.event.inputs.api_server }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ] && [ ! -z "$ISSUE_API_SERVER" ]; then
            echo "api_server=$ISSUE_API_SERVER" >> $GITHUB_OUTPUT
          elif [ ! -z "${{ secrets.API_SERVER }}" ]; then
            echo "api_server=${{ secrets.API_SERVER }}" >> $GITHUB_OUTPUT
          else
            echo "api_server=''" >> $GITHUB_OUTPUT
          fi

  # 同步 上游仓库 更新配置文件
  sync:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      #检出 workflow 文件
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}

      # 同步上游更新
      - name: Sync with upstream
        continue-on-error: true
        run: |
          # 克隆上游仓库（带子模块）
          git clone --recursive https://github.com/rustdesk/rustdesk.git upstream-temp
          cd upstream-temp
          # 删除所有 .git 目录和 .gitignore 文件
          find . -name ".git" -type d -exec rm -rf {} +
          find . -name ".gitignore" -type f -exec rm -f {} +
          # 复制所有文件到当前目录
          cd ..
          cp -r upstream-temp/. .
          # 删除临时目录
          rm -rf upstream-temp

      # 定制客户端
      - name: Customize client
        continue-on-error: true
        run: |
          # 获取所有配置变量（从needs.setup中获取）
          TAG_NAME="${{ needs.setup.outputs.tag_name }}"
          TAG_PREFIX="${{ needs.setup.outputs.tag_prefix }}"
          CUSTOM_SLOGAN="${{ needs.setup.outputs.custom_slogan }}"
          CUSTOM_SLOGAN_LINK="${{ needs.setup.outputs.custom_slogan_link }}"
          LICENSE_KEY="${{ needs.setup.outputs.license_key }}"
          RENDEZVOUS_SERVER="${{ needs.setup.outputs.rendezvous_server }}"
          RS_PUB_KEY="${{ needs.setup.outputs.rs_pub_key }}"
          API_SERVER="${{ needs.setup.outputs.api_server }}"
          
          # 只在有输入时更新配置文件
          if [ ! -z "$RENDEZVOUS_SERVER" ]; then
            echo "Updating RENDEZVOUS_SERVERS"
            sed -i '/^pub const RENDEZVOUS_SERVERS:/c\pub const RENDEZVOUS_SERVERS: \&[&str] = \&["'"$RENDEZVOUS_SERVER"'"];' libs/hbb_common/src/config.rs
          fi
          
          if [ ! -z "$RS_PUB_KEY" ]; then
            echo "Updating RS_PUB_KEY"
            sed -i '/^pub const RS_PUB_KEY:/c\pub const RS_PUB_KEY: \&str = "'"$RS_PUB_KEY"'";' libs/hbb_common/src/config.rs
          fi
          
          if [ ! -z "$API_SERVER" ]; then
            echo "Updating API_SERVER"
            sed -i '/^    pub const OPTION_API_SERVER:/c\    pub const OPTION_API_SERVER: \&str = "'"$API_SERVER"'";' libs/hbb_common/src/config.rs
          fi
          
          # 更新 flutter-nightly.yml 中的标签
          echo "Updating tag in flutter-nightly.yml"
          sed -i '/upload-tag:/ s/"nightly"/"'"$TAG_NAME"'"/' .github/workflows/flutter-nightly.yml
          
          # 如果有许可证密钥，则添加到配置
          if [ ! -z "$LICENSE_KEY" ]; then
            echo "添加许可证密钥"
            # 这里添加处理许可证密钥的代码
          fi

          # 添加自定义翻译到 cn.rs
          # 在最后一个翻译项后添加新条目（保持逗号格式）
          sed -i '/.*"Default trackpad speed".*/ a\
                  ("Thanks_To", "感谢"),\
                  ("RustDesk_Team", "RustDesk"),\
                  ("Team", "团队"),\
                  ("Custom_Author", "Jack"),\
                  ("Custom_Work", "定制"),\
                  ("Company_Name", "'"$CUSTOM_SLOGAN"'"),\
                  ("Special_Edition", "特别版"),' \
                  src/lang/cn.rs

          # 添加自定义标语到 index.tis

          # 使用从variables步骤获取的自定义标语和链接
          COMPANY_NAME="$CUSTOM_SLOGAN"
          COMPANY_LINK="$CUSTOM_SLOGAN_LINK"

          # 添加自定义标语到页面

          # 第一行 - 正确的sciter语法格式
          echo '            <p style='\''font-weight: bold'\''>" + translate("Thanks_To") + "</p>\' > insert_content.txt

          # # 第二行 - 正确的sciter语法格式
          # echo '            <p style='\''font-weight: bold'\''>" + translate("Thanks_To") + " " + translate("Custom_Author") + " " + translate("Custom_Work") + "</p>\' >> insert_content.txt
          
          # # 第三行 - 根据条件添加公司信息（按照Sciter正确的超链接格式）
          # if [ -n "$COMPANY_NAME" ] && [ -n "$COMPANY_LINK" ]; then
          #   # 有名字和链接
          #   echo '            <p style='\''font-weight: bold'\''>" + translate("Company_Name") + " <span .link .custom-event url='\''" + "'$COMPANY_LINK'" + "'\''>" + translate("Company_Name") + "</span> " + translate("Special_Edition") + "</p>\' >> insert_content.txt
          #   echo "添加第三行，有公司名和链接: $COMPANY_NAME, $COMPANY_LINK"
          # elif [ -n "$COMPANY_NAME" ]; then
          #   # 只有名字
          #   echo '            <p style='\''font-weight: bold'\''>" + translate("Company_Name") + " " + translate("Special_Edition") + "</p>\' >> insert_content.txt
          #   echo "添加第三行，只有公司名: $COMPANY_NAME"
          # elif [ -n "$COMPANY_LINK" ]; then
          #   # 只有链接
          #   echo '            <p style='\''font-weight: bold'\''>" + "<span .link .custom-event url='\''" + "'$COMPANY_LINK'" + "'\''>"' + "$COMPANY_LINK" + '</span> " + translate("Special_Edition") + "</p>\' >> insert_content.txt
          #   echo "添加第三行，只有链接: $COMPANY_LINK"
          # else
          #   echo "不添加第三行，因为没有公司名和链接"
          # fi
          
          # 使用sed的r命令一次性插入所有内容
          sed -i "/Slogan_tip/r insert_content.txt" src/ui/index.tis
          
          # 清理临时文件
          rm -f insert_content.txt

      # 提交定制客户端源码
      - name: Commit customize client source code
        continue-on-error: true
        run: | 
          # 提交更改
          git add .
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git commit -m "Sync with rustdesk/rustdesk and update configurations"

      # 比较本地和远程文件
      - name: Compare local and remote files
        continue-on-error: true
        shell: /usr/bin/bash -e {0}
        run: |
          set +e  # 禁用自动退出
          echo "Comparing local files with upstream repository..."
          # 克隆上游仓库用于比较（包含子模块）
          git clone --recursive https://github.com/rustdesk/rustdesk.git upstream-compare
          cd upstream-compare
          # 删除所有 .git 目录和 .gitignore 文件（包括子模块中的）
          find . -name ".git" -type d -exec rm -rf {} +
          find . -name ".gitignore" -type f -exec rm -f {} +
          cd ..
          
          echo "=== 文件差异 ==="
          echo "只存在本地的文件:"
          diff -r --exclude=.git --exclude=upstream-compare . upstream-compare | grep "Only in .:" | sed 's/Only in .://'
          echo "只存在上游的文件:"
          diff -r --exclude=.git --exclude=upstream-compare . upstream-compare | grep "Only in upstream-compare:" | sed 's/Only in upstream-compare://'
          echo "内容不同的文件:"
          diff -r --exclude=.git --exclude=upstream-compare . upstream-compare --brief | grep -v "Only in"
          
          echo -e "\n=== flutter-nightly.yml 内容 ==="
          cat .github/workflows/flutter-nightly.yml
          
          # 清理临时目录
          rm -rf upstream-compare
          exit 0  # 确保步骤总是成功完成

      # 推送到仓库
      - name: Push to repository with customize client source code
        continue-on-error: true
        uses: ad-m/github-push-action@master
        with:
          branch: main
          force: true
          github_token: ${{ secrets.WORKFLOW_TOKEN }}

  # 触发清理缓存工作流然后触发构建
  trigger-workflows:
    needs: [setup, sync]
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    steps:
      # 1. 触发清理缓存工作流
      - name: Trigger clear cache workflow
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'clear-cache.yml',
              ref: 'main'
            });
      
      # 2. 等待清理缓存完成
      - name: Wait for clear cache workflow
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const maxAttempts = 10; // 最多等待10分钟
            const interval = 30; // 每30秒检查一次
            let attempts = 0;
            
            while (attempts < maxAttempts) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'clear-cache.yml',
                branch: 'main',
                per_page: 1
              });
              
              if (runs.data.total_count === 0) {
                console.log('No clear cache workflow runs found, waiting...');
                await new Promise(resolve => setTimeout(resolve, interval * 1000));
                attempts++;
                continue;
              }

              const latestRun = runs.data.workflow_runs[0];
              console.log(`Latest clear cache workflow status: ${latestRun.status}, conclusion: ${latestRun.conclusion}`);
              
              if (latestRun.status === 'completed') {
                console.log('Clear cache workflow completed, continuing with next steps');
                break;
              }
              
              console.log(`Clear cache workflow still running, attempt ${attempts + 1}/${maxAttempts}`);
              await new Promise(resolve => setTimeout(resolve, interval * 1000));
              attempts++;
            }
            
            if (attempts >= maxAttempts) {
              console.log('Clear cache workflow did not complete within the expected time, continuing with next steps');
            }
            
      # 3. 触发 flutter-nightly.yml 工作流（在清理缓存后）
      - name: Trigger flutter nightly build
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'flutter-nightly.yml',
              ref: 'main'
            });

      # 等待工作流启动
      - name: Wait for workflow to start
        continue-on-error: true
        run: |
          echo "Waiting 30 seconds for workflow to start..."
          sleep 30

  # 硬重置并强制推送
  hard-reset-and-cleanup:
    needs: trigger-workflows
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      pull-requests: write
    steps:
      # 等待 flutter-nightly 工作流完成
      - name: Wait for flutter-nightly workflow
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const maxAttempts = 180; // 最多等待180分钟
            const interval = 60; // 每60秒检查一次
            let attempts = 0;
            
            while (attempts < maxAttempts) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'flutter-nightly.yml',
                branch: 'main',
                per_page: 1
              });
              
              if (runs.data.total_count === 0) {
                console.log('No workflow runs found, waiting...');
                await new Promise(resolve => setTimeout(resolve, interval * 1000));
                attempts++;
                continue;
              }

              const latestRun = runs.data.workflow_runs[0];
              console.log(`Latest workflow status: ${latestRun.status}, conclusion: ${latestRun.conclusion}`);
              
              if (latestRun.status === 'completed') {
                if (latestRun.conclusion === 'success' || latestRun.conclusion === 'cancelled') {
                  console.log(`Workflow completed with conclusion: ${latestRun.conclusion}, continuing with next steps`);
                  break;
                } else {
                  console.log(`Workflow failed with conclusion: ${latestRun.conclusion}, continuing with next steps`);
                  break;
                }
              }
              
              console.log(`Workflow still running, attempt ${attempts + 1}/${maxAttempts}`);
              await new Promise(resolve => setTimeout(resolve, interval * 1000));
              attempts++;
            }
            
            if (attempts >= maxAttempts) {
              console.log('Workflow did not complete within the expected time, continuing with next steps');
              // 尝试取消正在运行的 workflow
              try {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'flutter-nightly.yml',
                  branch: 'main',
                  per_page: 1
                });
                
                if (runs.data.total_count > 0) {
                  const latestRun = runs.data.workflow_runs[0];
                  if (latestRun.status === 'in_progress') {
                    await github.rest.actions.cancelWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: latestRun.id
                    });
                    console.log('Successfully cancelled the running workflow');
                  }
                }
              } catch (error) {
                console.log('Failed to cancel workflow:', error.message);
              }
            }

      #检出 workflow 文件
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}


      # 推送到仓库
      - name: Push to repository with sync
        continue-on-error: true
        uses: ad-m/github-push-action@master
        with:
          branch: main
          force: true
          github_token: ${{ secrets.WORKFLOW_TOKEN }}

  # 删除 release 源代码
  delete-release-source:
    needs: [setup, hard-reset-and-cleanup]
    runs-on: ubuntu-latest
    steps:
      - name: Delete source code from release
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const tag = '${{ needs.setup.outputs.tag_name }}';
            
            try {
              // 获取指定标签的 release
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              // 打印所有资源
              console.log('All release assets:');
              for (const asset of release.assets) {
                console.log(` - ${asset.name} (${asset.id})`);
              }
              
              // 找到并删除源代码资源（使用多种可能的匹配模式）
              let deletedAssets = 0;
              for (const asset of release.assets) {
                // 匹配可能的源代码文件名模式
                if (
                  asset.name.includes('Source code') || 
                  asset.name.includes('source code') ||
                  asset.name.endsWith('.zip') || 
                  asset.name.endsWith('.tar.gz') ||
                  asset.name.includes('source') ||
                  asset.name.includes('Source')
                ) {
                  console.log(`Deleting asset: ${asset.name}`);
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                  deletedAssets++;
                }
              }
              
              if (deletedAssets > 0) {
                console.log(`Successfully deleted ${deletedAssets} source code assets`);
              } else {
                console.log('No source code assets found to delete');
              }
            } catch (error) {
              if (error.status === 404) {
                console.log('Release not found, skipping deletion');
              } else {
                console.log(`Error: ${error.message}`);
                throw error;
              }
            }

  # 删除 workflow 运行
  delete-workflow-runs:
    needs: delete-release-source
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete workflow runs
        continue-on-error: true
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 3